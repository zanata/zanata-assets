//
// Layout Component - Default Settings
// -----------------------------------
// Change in _settings.scss

$layout-prefix                  : "l"                             !default;
$layout-mod                     : "#{$layout-prefix}#{$mod}"      !default;
$layout-el                      : "#{$layout-prefix}#{el}"        !default;
$layout-wrapper-max-width       : 48em                            !default;
$layout-wrapper-min-ie-width    : 44em                            !default; // NOTE: old ie only
$layout-spacing-increments      : 0 0.25 0.5 1 1.5 2              !default;
$layout-spacing-increment-names : 0 "quarter" "half" 1 "1half" 2  !default;
$layout-spacing-sides           : top bottom left right           !default;

/*

### Layout Helpers

#### Clearfix

<div class="ph__block l--clearfix">
  .l--clearfix
  (use overflow:hidden)
</div>

<div class="ph__block l--clearfix-overflow">
  .l--clearfix-overflow
  (old style)
</div>

*/

// TODO: Remove namespacing when old zanata removed
.new-zanata {

.l--clearfix,
.l--cf {
  @include clearfix;
}

.l--clearfix-overflow,
.l--cf-of {
  @include pie-clearfix;
}

}

/*

#### Floats

```
<div class="ph__block l--float-left">
  .l--float-left
</div>

<div class="ph__block l--float-right">
  .l--float-right
</div>
```

*/

// TODO: Remove namespacing when old zanata removed
.new-zanata {

.l--float-left {
  float: left !important;
}

.l--float-right {
  float: right !important;
}

}

/*

#### Constraints

```
<div class="ph__block l--constrain-small">
  .l--constrain-small
</div>

<div class="ph__block l--constrain-medium">
  .l--constrain-medium
</div>

<div class="ph__block l--constrain-large">
  .l--constrain-large
</div>
```

*/

// TODO: Remove namespacing when old zanata removed
.new-zanata {

.l--constrain-small {
  max-width: rhythm(15);
}

.l--constrain-medium {
  max-width: rhythm(32);
}

.l--constrain-large {
  max-width: rhythm(42);
}

@include breakpoint($e-medium) {
  .l--constrain-small-m {
    max-width: rhythm(15);
  }

  .l--constrain-medium-m {
    max-width: rhythm(32);
  }

  .l--constrain-large-m {
    max-width: rhythm(42);
  }
}

@include breakpoint($e-large) {
  .l--constrain-small-l {
    max-width: rhythm(15);
  }

  .l--constrain-medium-l {
    max-width: rhythm(32);
  }

  .l--constrain-large-l {
    max-width: rhythm(42);
  }
}

@include breakpoint($gte-huge) {
  .l--constrain-small-h {
    max-width: rhythm(15);
  }

  .l--constrain-medium-h {
    max-width: rhythm(32);
  }

  .l--constrain-large-h {
    max-width: rhythm(42);
  }
}

}

/*

#### Limits

```
<div class="ph__block l--limit-small">
  .l--limit-small
</div>

<div class="ph__block l--limit-medium">
  .l--limit-medium
</div>

<div class="ph__block l--limit-large">
  .l--limit-large
</div>
```

*/

// TODO: Remove namespacing when old zanata removed
.new-zanata {

.l--limit-small {
  min-width: rhythm(15);
}

.l--limit-medium {
  min-width: rhythm(32);
}

.l--limit-large {
  min-width: rhythm(42);
}

@include breakpoint($e-medium) {
  .l--limit-small-m {
    min-width: rhythm(15);
  }

  .l--limit-medium-m {
    min-width: rhythm(32);
  }

  .l--limit-large-m {
    min-width: rhythm(42);
  }
}

@include breakpoint($e-large) {
  .l--limit-small-l {
    min-width: rhythm(15);
  }

  .l--limit-medium-l {
    min-width: rhythm(32);
  }

  .l--limit-large-l {
    min-width: rhythm(42);
  }
}

@include breakpoint($gte-huge) {
  .l--limit-small-h {
    min-width: rhythm(15);
  }

  .l--limit-medium-h {
    min-width: rhythm(32);
  }

  .l--limit-large-h {
    min-width: rhythm(42);
  }
}

}

/*

#### Wrapper

$max-site-width is assigned to this

*/

// TODO: Remove namespacing when old zanata removed
.new-zanata {

.#{$layout-el}wrapper {
  max-width: $layout-wrapper-max-width;
  margin-left: auto;
  margin-right: auto;
  padding: 0 $grid-padding / 4;
  @include breakpoint($gte-medium) {
    padding: 0 $grid-padding / 2;
  }
  @include breakpoint($gte-huge) {
    padding: 0 $grid-padding;
  }
  @include no-mqueries {
    min-width: $layout-wrapper-min-ie-width; // ? Sets a min-width in ie so it doesn't get too squashed
  }
}

}

/*

#### Spacing

These classes use `!important` as you would not be applying these should always "win".
Only use them if it does not make sense to add this styling to another element/component.

*/
@each $i in  $layout-spacing-increments {
  $i-name: nth($layout-spacing-increment-names, index($layout-spacing-increments, $i));
  @each $side in  $layout-spacing-sides {
/*
```
<div class="ph__block l--push-#{$side}-#{$i-name}">
  .l--push-#{$side}-#{$i-name}
</div>

<div class="ph__block l--pad-#{$side}-#{$i-name}">
  .l--pad-#{$side}-#{$i-name}
</div>
```
*/
  }
/*
```
<div class="ph__block l--push-v-#{$i-name}">
  .l--push-v-#{$i-name}
</div>

<div class="ph__block l--pad-v-#{$i-name}">
  .l--pad-v-#{$i-name}
</div>

<div class="ph__block l--push-h-#{$i-name}">
  .l--push-h-#{$i-name}
</div>

<div class="ph__block l--pad-h-#{$i-name}">
  .l--pad-h-#{$i-name}
</div>

<div class="ph__block l--push-all-#{$i-name}">
  .l--push-v-#{$i-name}
</div>

<div class="ph__block l--pad-all-#{$i-name}">
  .l--pad-v-#{$i-name}
</div>
```
*/
}

// TODO: Remove namespacing when old zanata removed
.new-zanata {

@each $i in  $layout-spacing-increments {
  $i-name: nth($layout-spacing-increment-names, index($layout-spacing-increments, $i));
  @each $side in  $layout-spacing-sides {
    .l--push-#{$side}-#{$i-name} {
      margin-#{$side}: rhythm($i) !important;
    }
    .l--pad-#{$side}-#{$i-name} {
      padding-#{$side}: rhythm($i) !important;
    }
  }
  .l--push-v-#{$i-name} {
    margin-top: rhythm($i) !important;
    margin-bottom: rhythm($i) !important;
  }
  .l--pad-v-#{$i-name} {
    padding-top: rhythm($i) !important;
    padding-bottom: rhythm($i) !important;
  }
  .l--push-h-#{$i-name} {
    margin-left: rhythm($i) !important;
    margin-right: rhythm($i) !important;
  }
  .l--pad-h-#{$i-name} {
    padding-left: rhythm($i) !important;
    padding-right: rhythm($i) !important;
  }
  .l--push-all-#{$i-name} {
    margin: rhythm($i) !important;
  }
  .l--pad-all-#{$i-name} {
    padding: rhythm($i) !important;
  }
}

}

